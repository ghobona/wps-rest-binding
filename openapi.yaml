openapi: 3.0.2
info:
  version: 1.0.0
  title: "OGC API - Processes - Part 1: Core"
  termsOfService: 'http://www.opengeospatial.org/legal/'
  contact:
    name: "Open Geospatial Consortium (OGC)"
    email: standards-team@ogc.org
    url: 'https://www.ogc.org/contacts'
  license:
    name: OGC software license 1.0
    url: 'http://www.ogc.org/ogc/software/1.0'
  x-logo:
    url: 'https://www.ogc.org/pub/www/files/OGC_Logo_2D_Blue_x_0_0.png'
  description: >
    This document is not an OGC Standard. This document is distributed for review and comment. This document is subject to change without notice and may not be referred to as an OGC Standard.
    
    Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.

    # Introduction

    In many cases geospatial or location data, including data from sensors, must be processed before the information can be used effectively. 
    The OGC Web Processing Service (WPS) Interface Standard provided a standard interface that simplifies the task of making simple or complex 
    computational processing services accessible via web services. Such services include well-known processes found in GIS software as well as 
    specialized processes for spatio-temporal modeling and simulation. While the OGC WPS standard was designed with spatial processing in mind, 
    it could also be used to readily insert non-spatial processing tasks into a web services environment. The WPS standard provided a robust, 
    interoperable, and versatile protocol for process execution on web services. It supports both immediate processing for computational tasks 
    that take little time and asynchronous processing for more complex and time-consuming tasks. Moreover, the WPS standard defines a general 
    process model that is designed to provide an interoperable description of processing functions. It is intended to support process cataloguing 
    and discovery in a distributed environment.
    
    The OGC API - Processes builds on the WPS 2.0 standard and defines the processing standards to communicate over a RESTful protocol using JSON 
    encodings. This API uses [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md) to describe the interface.

tags:
  - name: Capabilities
    description: Capabilities operations
  - name: ConformanceDeclaration
    description: ConformanceDeclaration operations
  - name: ProcessCollection
    description: ProcessCollection operations
  - name: ProcessDescription
    description: ProcessDescription operations
  - name: JobCollection
    description: JobCollection operations
  - name: Execute
    description: Execute operations
  - name: Status
    description: Status operations
  - name: Dismiss
    description: Dismiss operations
  - name: Result
    description: Result operations

paths:
  /:
    get:
      summary: landing page of this API
      description: >-
        The landing page provides links to the API definition, the conformance
        declaration and the metadata about the processes offered by this service.
      operationId: getLandingPage
      tags:
        - Capabilities
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/LandingPage.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
  /conformance:
    get:
      summary: information about standards that this API conforms to
      description: >-
        Lists all requirements classes specified in the standard (e.g., OGC API - Processes
        Part 1: Core) that the server conforms to
      operationId: getConformanceClasses
      tags:
        - ConformanceDeclaration
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ConformanceDeclaration.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
  /processes:
    get:
      summary: retrieve available processes
      description: >-
        Lists all available processes this server offers.
      operationId: getProcesses
      tags:
        - ProcessCollection
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ProcessCollection.yaml"
  /processes/{processId}:
    get:
      summary: retrieve a process description
      description: >-
        Describes a process.
      operationId: getProcessDescription
      tags:
        - ProcessDescription
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ProcessDescription.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
  /processes/{processId}/jobs:
    get:
      summary: retrieve the list of jobs for a process.
      description: >-
        Lists available jobs of a process.
      operationId: getJobs
      tags:
        - JobCollection
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/JobCollection.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
    post:
      summary: execute a process.
      description: >-
        Submits a new job.
      operationId: execute
      tags:
        - Execute
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
      requestBody:
        description: Mandatory execute request JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/schemas/execute.yaml"
      responses:
        200:
          $ref: 'https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ExecuteSync.yaml'
        201:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ExecuteAsync.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
      callbacks:
        jobCompleted:
          "{$request.body#/subscriber/successUri}":
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/schemas/result.yaml"
              responses:
                200:
                  description: Results received successfully
  /processes/{processId}/jobs/{jobId}:
    get:
      summary: retrieve the status of a job
      description: >-
        Shows the status of a job.
      operationId: getStatus
      tags:
        - Status
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/jobId.yaml"
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/Status.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
    delete:
      summary: cancel a job execution, remove a finished job
      description: >-
        Cancel a job execution and remove it from the jobs list.
      operationId: dismiss
      tags:
        - Dismiss
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/jobId.yaml"
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/Status.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
  /processes/{processId}/jobs/{jobId}/results:
    get:
      summary: retrieve the result(s) of a job
      description: >-
        Lists available results of a job. In case of a failure, lists exceptions instead.
      operationId: getResult
      tags:
        - Result
      parameters:
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/processId.yaml"
        - $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/parameters/jobId.yaml"
      responses:
        200:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/Results.yaml"
        404:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/NotFound.yaml"
        500:
          $ref: "https://raw.githubusercontent.com/ghobona/wps-rest-binding/master/core/openapi/responses/ServerError.yaml"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/geoprocessing/WPS/0.01
  - description: 52°North demo server
    url: http://geoprocessing.demo.52north.org:8080/javaps/rest/
